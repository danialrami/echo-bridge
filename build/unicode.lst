ARM GAS  /tmp/ccffC0MP.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"unicode.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ff_wtoupper,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	ff_wtoupper
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	ff_wtoupper:
  27              	.LVL0:
  28              	.LFB320:
  29              		.file 1 "unicode.c"
   1:unicode.c     **** #include "ff.h"
   2:unicode.c     **** 
   3:unicode.c     **** #if _USE_LFN != 0
   4:unicode.c     **** 
   5:unicode.c     **** WCHAR ff_wtoupper (	/* Upper converted character */
   6:unicode.c     **** 	WCHAR chr		/* Input character */
   7:unicode.c     **** )
   8:unicode.c     **** {
  30              		.loc 1 8 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
   9:unicode.c     **** 	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6
  35              		.loc 1 9 2 view .LVU1
  10:unicode.c     **** 	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4
  36              		.loc 1 10 2 view .LVU2
  11:unicode.c     **** 	int i;
  37              		.loc 1 11 2 view .LVU3
  12:unicode.c     **** 
  13:unicode.c     **** 
  14:unicode.c     **** 	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  38              		.loc 1 14 2 view .LVU4
  39              		.loc 1 14 14 view .LVU5
  40 0000 0649     		ldr	r1, .L10
  41              		.loc 1 14 9 is_stmt 0 view .LVU6
  42 0002 0022     		movs	r2, #0
  43              		.loc 1 14 23 view .LVU7
  44 0004 6123     		movs	r3, #97
ARM GAS  /tmp/ccffC0MP.s 			page 2


  45 0006 03E0     		b	.L2
  46              	.LVL1:
  47              	.L4:
  48              		.loc 1 14 23 discriminator 4 view .LVU8
  49 0008 31F8023F 		ldrh	r3, [r1, #2]!
  50              		.loc 1 14 52 discriminator 4 view .LVU9
  51 000c 0132     		adds	r2, r2, #1
  52              	.LVL2:
  53              		.loc 1 14 14 is_stmt 1 discriminator 4 view .LVU10
  54              		.loc 1 14 2 is_stmt 0 discriminator 4 view .LVU11
  55 000e 23B1     		cbz	r3, .L8
  56              	.LVL3:
  57              	.L2:
  58              		.loc 1 14 56 is_stmt 1 discriminator 3 view .LVU12
  59              		.loc 1 14 51 discriminator 3 view .LVU13
  60              		.loc 1 14 27 is_stmt 0 discriminator 3 view .LVU14
  61 0010 9842     		cmp	r0, r3
  62 0012 F9D1     		bne	.L4
  15:unicode.c     **** 
  16:unicode.c     **** 	return tbl_lower[i] ? tbl_upper[i] : chr;
  63              		.loc 1 16 2 is_stmt 1 view .LVU15
  64              		.loc 1 16 37 is_stmt 0 view .LVU16
  65 0014 024B     		ldr	r3, .L10+4
  66 0016 33F81200 		ldrh	r0, [r3, r2, lsl #1]
  67              	.LVL4:
  68              	.L8:
  17:unicode.c     **** }
  69              		.loc 1 17 1 view .LVU17
  70 001a 7047     		bx	lr
  71              	.L11:
  72              		.align	2
  73              	.L10:
  74 001c 00000000 		.word	.LANCHOR0
  75 0020 00000000 		.word	.LANCHOR1
  76              		.cfi_endproc
  77              	.LFE320:
  79              		.section	.text.ff_convert,"ax",%progbits
  80              		.align	1
  81              		.p2align 2,,3
  82              		.global	ff_convert
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv5-d16
  88              	ff_convert:
  89              	.LVL5:
  90              	.LFB321:
  18:unicode.c     **** 
  19:unicode.c     **** #if _USE_LFN == 3		/* LFN with dynamic memory allocation */
  20:unicode.c     **** WCHAR* ff_memalloc (UINT msize)
  21:unicode.c     **** {
  22:unicode.c     **** 	return malloc(msize);
  23:unicode.c     **** }
  24:unicode.c     **** 
  25:unicode.c     **** void ff_memfree(WCHAR* mblock)
  26:unicode.c     **** {
  27:unicode.c     **** 	free(mblock);
ARM GAS  /tmp/ccffC0MP.s 			page 3


  28:unicode.c     **** }
  29:unicode.c     **** #endif
  30:unicode.c     **** 
  31:unicode.c     **** #endif
  32:unicode.c     **** 
  33:unicode.c     **** #if _CODE_PAGE == 437
  34:unicode.c     **** #define _TBLDEF 1
  35:unicode.c     **** static
  36:unicode.c     **** const WCHAR Tbl[] = {	/*  CP437(0x80-0xFF) to Unicode conversion table */
  37:unicode.c     **** 	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x
  38:unicode.c     **** 	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x
  39:unicode.c     **** 	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x2310, 0x00AC, 0x00BD, 0x
  40:unicode.c     **** 	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x
  41:unicode.c     **** 	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x
  42:unicode.c     **** 	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x
  43:unicode.c     **** 	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x
  44:unicode.c     **** 	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x
  45:unicode.c     **** };
  46:unicode.c     **** 
  47:unicode.c     **** #elif _CODE_PAGE == 850
  48:unicode.c     **** #define _TBLDEF 1
  49:unicode.c     **** static
  50:unicode.c     **** const WCHAR Tbl[] = {	/*  CP850(0x80-0xFF) to Unicode conversion table */
  51:unicode.c     **** 	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x
  52:unicode.c     **** 	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x
  53:unicode.c     **** 	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x
  54:unicode.c     **** 	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0, 0x00A9, 0x2563, 0x2551, 0x2557, 0x
  55:unicode.c     **** 	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3, 0x255A, 0x2554, 0x2569, 0x2566, 0x
  56:unicode.c     **** 	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE, 0x00CF, 0x2518, 0x250C, 0x2588, 0x
  57:unicode.c     **** 	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE, 0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x
  58:unicode.c     **** 	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x
  59:unicode.c     **** };
  60:unicode.c     **** 
  61:unicode.c     **** #else
  62:unicode.c     **** #define _TBLDEF 1
  63:unicode.c     **** static
  64:unicode.c     **** const WCHAR Tbl[] = {	/*  CP850(0x80-0xFF) to Unicode conversion table */
  65:unicode.c     **** 	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x
  66:unicode.c     **** 	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x
  67:unicode.c     **** 	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x
  68:unicode.c     **** 	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0, 0x00A9, 0x2563, 0x2551, 0x2557, 0x
  69:unicode.c     **** 	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3, 0x255A, 0x2554, 0x2569, 0x2566, 0x
  70:unicode.c     **** 	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE, 0x00CF, 0x2518, 0x250C, 0x2588, 0x
  71:unicode.c     **** 	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE, 0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x
  72:unicode.c     **** 	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x
  73:unicode.c     **** };
  74:unicode.c     **** #endif
  75:unicode.c     **** 
  76:unicode.c     **** 
  77:unicode.c     **** WCHAR ff_convert (	/* Converted character, zero means error */
  78:unicode.c     **** 	WCHAR	chr,	/* Character code to be converted */
  79:unicode.c     **** 	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
  80:unicode.c     **** )
  81:unicode.c     **** {
  91              		.loc 1 81 1 is_stmt 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccffC0MP.s 			page 4


  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  82:unicode.c     **** 	WCHAR c;
  96              		.loc 1 82 2 view .LVU19
  83:unicode.c     **** 
  84:unicode.c     **** 
  85:unicode.c     **** 	if (chr < 0x80) {	/* ASCII */
  97              		.loc 1 85 2 view .LVU20
  98              		.loc 1 85 5 is_stmt 0 view .LVU21
  99 0000 7F28     		cmp	r0, #127
 100 0002 14D9     		bls	.L13
  86:unicode.c     **** 		c = chr;
  87:unicode.c     **** 
  88:unicode.c     **** 	} else {
  89:unicode.c     **** #if _TBLDEF
  90:unicode.c     **** 		if (dir) {		/* OEMCP to Unicode */
 101              		.loc 1 90 3 is_stmt 1 view .LVU22
 102              		.loc 1 90 6 is_stmt 0 view .LVU23
 103 0004 81B9     		cbnz	r1, .L14
 104 0006 0D4A     		ldr	r2, .L23
 105 0008 C723     		movs	r3, #199
 106 000a 03E0     		b	.L15
 107              	.LVL6:
 108              	.L21:
  91:unicode.c     **** 			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
  92:unicode.c     **** 		} else {		/* Unicode to OEMCP */
  93:unicode.c     **** 			for (c = 0; c < 0x80; c++) {
 109              		.loc 1 93 4 discriminator 2 view .LVU24
 110 000c 8029     		cmp	r1, #128
 111 000e 0DD0     		beq	.L18
  94:unicode.c     **** 				if (chr == Tbl[c]) break;
 112              		.loc 1 94 19 view .LVU25
 113 0010 32F8023F 		ldrh	r3, [r2, #2]!
 114              	.LVL7:
 115              	.L15:
  93:unicode.c     **** 				if (chr == Tbl[c]) break;
 116              		.loc 1 93 26 is_stmt 1 view .LVU26
  93:unicode.c     **** 				if (chr == Tbl[c]) break;
 117              		.loc 1 93 16 view .LVU27
 118              		.loc 1 94 8 is_stmt 0 view .LVU28
 119 0014 9842     		cmp	r0, r3
 120 0016 1FFA81FC 		uxth	ip, r1
 121              	.LVL8:
 122              		.loc 1 94 5 is_stmt 1 view .LVU29
  93:unicode.c     **** 				if (chr == Tbl[c]) break;
 123              		.loc 1 93 4 is_stmt 0 view .LVU30
 124 001a 01F10101 		add	r1, r1, #1
 125              	.LVL9:
 126              		.loc 1 94 8 view .LVU31
 127 001e F5D1     		bne	.L21
  95:unicode.c     **** 			}
  96:unicode.c     **** 			c = (c + 0x80) & 0xFF;
 128              		.loc 1 96 11 view .LVU32
 129 0020 0CF18000 		add	r0, ip, #128
 130              	.LVL10:
 131              		.loc 1 96 11 view .LVU33
 132 0024 80B2     		uxth	r0, r0
ARM GAS  /tmp/ccffC0MP.s 			page 5


 133 0026 7047     		bx	lr
 134              	.LVL11:
 135              	.L14:
  91:unicode.c     **** 		} else {		/* Unicode to OEMCP */
 136              		.loc 1 91 4 is_stmt 1 view .LVU34
  91:unicode.c     **** 		} else {		/* Unicode to OEMCP */
 137              		.loc 1 91 6 is_stmt 0 view .LVU35
 138 0028 FF28     		cmp	r0, #255
 139 002a 01D9     		bls	.L22
 140              	.LVL12:
 141              	.L18:
  91:unicode.c     **** 		} else {		/* Unicode to OEMCP */
 142              		.loc 1 91 6 view .LVU36
 143 002c 0020     		movs	r0, #0
 144              	.LVL13:
 145              	.L13:
  97:unicode.c     **** 		}
  98:unicode.c     **** #else
  99:unicode.c     **** 		c = 0;
 100:unicode.c     **** #endif
 101:unicode.c     **** 	}
 102:unicode.c     **** 
 103:unicode.c     **** 	return c;
 146              		.loc 1 103 2 is_stmt 1 view .LVU37
 104:unicode.c     **** }
 147              		.loc 1 104 1 is_stmt 0 view .LVU38
 148 002e 7047     		bx	lr
 149              	.LVL14:
 150              	.L22:
  91:unicode.c     **** 		} else {		/* Unicode to OEMCP */
 151              		.loc 1 91 6 discriminator 1 view .LVU39
 152 0030 024B     		ldr	r3, .L23
 153 0032 8038     		subs	r0, r0, #128
 154              	.LVL15:
  91:unicode.c     **** 		} else {		/* Unicode to OEMCP */
 155              		.loc 1 91 6 discriminator 1 view .LVU40
 156 0034 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 157 0038 7047     		bx	lr
 158              	.L24:
 159 003a 00BF     		.align	2
 160              	.L23:
 161 003c 00000000 		.word	.LANCHOR2
 162              		.cfi_endproc
 163              	.LFE321:
 165              		.section	.rodata.Tbl,"a"
 166              		.align	2
 167              		.set	.LANCHOR2,. + 0
 170              	Tbl:
 171 0000 C700     		.short	199
 172 0002 FC00     		.short	252
 173 0004 E900     		.short	233
 174 0006 E200     		.short	226
 175 0008 E400     		.short	228
 176 000a E000     		.short	224
 177 000c E500     		.short	229
 178 000e E700     		.short	231
 179 0010 EA00     		.short	234
ARM GAS  /tmp/ccffC0MP.s 			page 6


 180 0012 EB00     		.short	235
 181 0014 E800     		.short	232
 182 0016 EF00     		.short	239
 183 0018 EE00     		.short	238
 184 001a EC00     		.short	236
 185 001c C400     		.short	196
 186 001e C500     		.short	197
 187 0020 C900     		.short	201
 188 0022 E600     		.short	230
 189 0024 C600     		.short	198
 190 0026 F400     		.short	244
 191 0028 F600     		.short	246
 192 002a F200     		.short	242
 193 002c FB00     		.short	251
 194 002e F900     		.short	249
 195 0030 FF00     		.short	255
 196 0032 D600     		.short	214
 197 0034 DC00     		.short	220
 198 0036 F800     		.short	248
 199 0038 A300     		.short	163
 200 003a D800     		.short	216
 201 003c D700     		.short	215
 202 003e 9201     		.short	402
 203 0040 E100     		.short	225
 204 0042 ED00     		.short	237
 205 0044 F300     		.short	243
 206 0046 FA00     		.short	250
 207 0048 F100     		.short	241
 208 004a D100     		.short	209
 209 004c AA00     		.short	170
 210 004e BA00     		.short	186
 211 0050 BF00     		.short	191
 212 0052 AE00     		.short	174
 213 0054 AC00     		.short	172
 214 0056 BD00     		.short	189
 215 0058 BC00     		.short	188
 216 005a A100     		.short	161
 217 005c AB00     		.short	171
 218 005e BB00     		.short	187
 219 0060 9125     		.short	9617
 220 0062 9225     		.short	9618
 221 0064 9325     		.short	9619
 222 0066 0225     		.short	9474
 223 0068 2425     		.short	9508
 224 006a C100     		.short	193
 225 006c C200     		.short	194
 226 006e C000     		.short	192
 227 0070 A900     		.short	169
 228 0072 6325     		.short	9571
 229 0074 5125     		.short	9553
 230 0076 5725     		.short	9559
 231 0078 5D25     		.short	9565
 232 007a A200     		.short	162
 233 007c A500     		.short	165
 234 007e 1025     		.short	9488
 235 0080 1425     		.short	9492
 236 0082 3425     		.short	9524
ARM GAS  /tmp/ccffC0MP.s 			page 7


 237 0084 2C25     		.short	9516
 238 0086 1C25     		.short	9500
 239 0088 0025     		.short	9472
 240 008a 3C25     		.short	9532
 241 008c E300     		.short	227
 242 008e C300     		.short	195
 243 0090 5A25     		.short	9562
 244 0092 5425     		.short	9556
 245 0094 6925     		.short	9577
 246 0096 6625     		.short	9574
 247 0098 6025     		.short	9568
 248 009a 5025     		.short	9552
 249 009c 6C25     		.short	9580
 250 009e A400     		.short	164
 251 00a0 F000     		.short	240
 252 00a2 D000     		.short	208
 253 00a4 CA00     		.short	202
 254 00a6 CB00     		.short	203
 255 00a8 C800     		.short	200
 256 00aa 3101     		.short	305
 257 00ac CD00     		.short	205
 258 00ae CE00     		.short	206
 259 00b0 CF00     		.short	207
 260 00b2 1825     		.short	9496
 261 00b4 0C25     		.short	9484
 262 00b6 8825     		.short	9608
 263 00b8 8425     		.short	9604
 264 00ba A600     		.short	166
 265 00bc CC00     		.short	204
 266 00be 8025     		.short	9600
 267 00c0 D300     		.short	211
 268 00c2 DF00     		.short	223
 269 00c4 D400     		.short	212
 270 00c6 D200     		.short	210
 271 00c8 F500     		.short	245
 272 00ca D500     		.short	213
 273 00cc B500     		.short	181
 274 00ce FE00     		.short	254
 275 00d0 DE00     		.short	222
 276 00d2 DA00     		.short	218
 277 00d4 DB00     		.short	219
 278 00d6 D900     		.short	217
 279 00d8 FD00     		.short	253
 280 00da DD00     		.short	221
 281 00dc AF00     		.short	175
 282 00de B400     		.short	180
 283 00e0 AD00     		.short	173
 284 00e2 B100     		.short	177
 285 00e4 1720     		.short	8215
 286 00e6 BE00     		.short	190
 287 00e8 B600     		.short	182
 288 00ea A700     		.short	167
 289 00ec F700     		.short	247
 290 00ee B800     		.short	184
 291 00f0 B000     		.short	176
 292 00f2 A800     		.short	168
 293 00f4 B700     		.short	183
ARM GAS  /tmp/ccffC0MP.s 			page 8


 294 00f6 B900     		.short	185
 295 00f8 B300     		.short	179
 296 00fa B200     		.short	178
 297 00fc A025     		.short	9632
 298 00fe A000     		.short	160
 299              		.section	.rodata.tbl_lower.1,"a"
 300              		.align	2
 301              		.set	.LANCHOR0,. + 0
 304              	tbl_lower.1:
 305 0000 6100     		.short	97
 306 0002 6200     		.short	98
 307 0004 6300     		.short	99
 308 0006 6400     		.short	100
 309 0008 6500     		.short	101
 310 000a 6600     		.short	102
 311 000c 6700     		.short	103
 312 000e 6800     		.short	104
 313 0010 6900     		.short	105
 314 0012 6A00     		.short	106
 315 0014 6B00     		.short	107
 316 0016 6C00     		.short	108
 317 0018 6D00     		.short	109
 318 001a 6E00     		.short	110
 319 001c 6F00     		.short	111
 320 001e 7000     		.short	112
 321 0020 7100     		.short	113
 322 0022 7200     		.short	114
 323 0024 7300     		.short	115
 324 0026 7400     		.short	116
 325 0028 7500     		.short	117
 326 002a 7600     		.short	118
 327 002c 7700     		.short	119
 328 002e 7800     		.short	120
 329 0030 7900     		.short	121
 330 0032 7A00     		.short	122
 331 0034 A100     		.short	161
 332 0036 0000     		.short	0
 333              		.section	.rodata.tbl_upper.0,"a"
 334              		.align	2
 335              		.set	.LANCHOR1,. + 0
 338              	tbl_upper.0:
 339 0000 4100     		.short	65
 340 0002 4200     		.short	66
 341 0004 4300     		.short	67
 342 0006 4400     		.short	68
 343 0008 4500     		.short	69
 344 000a 4600     		.short	70
 345 000c 4700     		.short	71
 346 000e 4800     		.short	72
 347 0010 4900     		.short	73
 348 0012 4A00     		.short	74
 349 0014 4B00     		.short	75
 350 0016 4C00     		.short	76
 351 0018 4D00     		.short	77
 352 001a 4E00     		.short	78
 353 001c 4F00     		.short	79
 354 001e 5000     		.short	80
ARM GAS  /tmp/ccffC0MP.s 			page 9


 355 0020 5100     		.short	81
 356 0022 5200     		.short	82
 357 0024 5300     		.short	83
 358 0026 5400     		.short	84
 359 0028 5500     		.short	85
 360 002a 5600     		.short	86
 361 002c 5700     		.short	87
 362 002e 5800     		.short	88
 363 0030 5900     		.short	89
 364 0032 5A00     		.short	90
 365 0034 2100     		.short	33
 366 0036 0000     		.short	0
 367              		.text
 368              	.Letext0:
 369              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 370              		.file 3 "/home/ubuntu/DaisyExamples/libDaisy/Middlewares/Third_Party/FatFs/src/integer.h"
ARM GAS  /tmp/ccffC0MP.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 unicode.c
     /tmp/ccffC0MP.s:17     .text.ff_wtoupper:0000000000000000 $t
     /tmp/ccffC0MP.s:26     .text.ff_wtoupper:0000000000000000 ff_wtoupper
     /tmp/ccffC0MP.s:74     .text.ff_wtoupper:000000000000001c $d
     /tmp/ccffC0MP.s:80     .text.ff_convert:0000000000000000 $t
     /tmp/ccffC0MP.s:88     .text.ff_convert:0000000000000000 ff_convert
     /tmp/ccffC0MP.s:161    .text.ff_convert:000000000000003c $d
     /tmp/ccffC0MP.s:166    .rodata.Tbl:0000000000000000 $d
     /tmp/ccffC0MP.s:170    .rodata.Tbl:0000000000000000 Tbl
     /tmp/ccffC0MP.s:300    .rodata.tbl_lower.1:0000000000000000 $d
     /tmp/ccffC0MP.s:304    .rodata.tbl_lower.1:0000000000000000 tbl_lower.1
     /tmp/ccffC0MP.s:334    .rodata.tbl_upper.0:0000000000000000 $d
     /tmp/ccffC0MP.s:338    .rodata.tbl_upper.0:0000000000000000 tbl_upper.0

NO UNDEFINED SYMBOLS
